// Generated by CoffeeScript 1.4.0
(function() {
  var Transaction,
    __slice = [].slice;

  Transaction = (function() {

    Transaction.DEBUG = false;

    function Transaction(client, parent, done) {
      this.client = client;
      this.parent = parent != null ? parent : null;
      this.done = done != null ? done : null;
      if (arguments.length === 2 && typeof this.parent === 'function') {
        this.done = arguments[1];
        this.parent = null;
      }
    }

    Transaction.prototype.debug = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (Transaction.DEBUG) {
        return console.log.apply(console, args);
      }
    };

    Transaction.prototype.start = function(callback) {
      this.savepoint = this.genSavepoint();
      if (this.parent != null) {
        return this.query("SAVEPOINT \"" + this.savepoint + "\";", callback);
      } else {
        return this.query("BEGIN; SAVEPOINT \"" + this.savepoint + "\";", callback);
      }
    };

    Transaction.prototype.nest = function(callback) {
      var nested;
      nested = new Transaction(this.client, this);
      return nested.start(function(err) {
        return callback(err, nested);
      });
    };

    Transaction.prototype.query = function() {
      var args, callback, _i, _ref, _ref1;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      if (Transaction.DEBUG) {
        this.debug("" + ((_ref = args[0].text) != null ? _ref : args) + "\n");
      }
      return (_ref1 = this.client).query.apply(_ref1, arguments);
    };

    Transaction.prototype.genSavepoint = function() {
      var chars, i, timestamp, uid, uidChars, _i;
      chars = '0123456789abcdef';
      uidChars = [];
      for (i = _i = 1; _i <= 32; i = ++_i) {
        uidChars[i] = chars[Math.floor(Math.random() * 16)];
      }
      uid = uidChars.join('');
      timestamp = (new Date()).toISOString();
      return timestamp + '_' + uid;
    };

    Transaction.prototype.restart = function(callback) {
      return this.rollbackToSavepoint(callback);
    };

    Transaction.prototype.rollbackToSavepoint = function(callback) {
      return this.query("ROLLBACK TO SAVEPOINT \"" + this.savepoint + "\";", callback);
    };

    Transaction.prototype.releaseSavepoint = function(callback) {
      return this.query("RELEASE SAVEPOINT \"" + this.savepoint + "\";", callback);
    };

    Transaction.prototype.rollbackToAndRelease = function(callback) {
      var query;
      query = "ROLLBACK TO SAVEPOINT \"" + this.savepoint + "\";\nRELEASE SAVEPOINT \"" + this.savepoint + "\";";
      return this.query(query, callback);
    };

    Transaction.prototype.cancel = function(callback) {
      if (this.parent != null) {
        return this.rollbackToAndRelease(callback);
      } else {
        return this.cancelAll(callback);
      }
    };

    Transaction.prototype.cancelAll = function(callback) {
      this.query("ROLLBACK", callback);
      return typeof this.done === "function" ? this.done() : void 0;
    };

    Transaction.prototype.finish = function(callback) {
      if (this.parent != null) {
        return this.releaseSavepoint(callback);
      } else {
        this.query("COMMIT", callback);
        return typeof this.done === "function" ? this.done() : void 0;
      }
    };

    Transaction.prototype.finalize = function(lastErr, callback) {
      if (lastErr) {
        return this.cancel(function(err) {
          return callback(lastErr);
        });
      } else {
        return this.finish(function(err) {
          return callback(err);
        });
      }
    };

    return Transaction;

  })();

  module.exports = Transaction;

}).call(this);
